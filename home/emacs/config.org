#+PROPERTY: header-args:emacs-lisp :tangle yes

* Aesthetic

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Monaspace Argon" :height 180)

  (tool-bar-mode -1)

  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-monokai-pro))
#+end_src

* Utils

** Emacs Settings

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    ;; enable tab completion
    (tab-always-indent 'complete)
    (display-line-numbers 'relative)
    (text-mode-ispell-word-completion nil)
    :hook
    (prog-mode . display-line-numbers-mode))
#+end_src

** Keybinds

#+begin_src emacs-lisp
  (defconst leader "SPC")

  (use-package general
    :ensure t)
#+end_src

* Text Editing

** Evil Mode

#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)

  (use-package evil
    :ensure t
    :custom
    (evil-undo-system 'undo-redo)
    (evil-want-C-u-delete t)
    (evil-want-C-u-scroll t)
    (evil-want-minibuffer t)
    :config
    (evil-mode 1))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

  (use-package evil-snipe
    :ensure t
    :custom
    (evil-snipe-scope 'buffer)
    (evil-snipe-spillover-scope 'buffer)
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1))

  (use-package evil-collection
    :ensure t
    :config
    (evil-collection-init))
#+end_src

** Completion

*** Orderless
This implements a custom completion ordering algorithm. In my opinion it's much more sensible, and allows multiple search terms separated by spaces.

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** Corfu (completion at point)
Completion at point is what most other text editors mean when they refer to completion.

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :general
    (:states 'insert :keymaps 'corfu-mode-map
  	   "TAB" 'corfu-next
  	   "S-TAB" 'corfu-previous
  	   "C-SPC" 'corfu-complete)
    :custom
    (corfu-auto t)
    :init
    (global-corfu-mode))
#+end_src

*** Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :general
    (:keymaps 'vertico-map
  	   "TAB" 'vertico-next
  	   "S-TAB" 'vertico-previous
  	   "C-SPC" 'vertico-insert)
    :init
    (vertico-mode))
#+end_src

** Treesit

#+begin_src emacs-lisp
  (use-package treesit-auto
    :ensure t
    :config
    (global-treesit-auto-mode))
#+end_src

** Programming Languages

*** Rust

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :custom
    (rust-mode-treesitter-derive t))
#+end_src

* Dev Workflows

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :general
    (:states 'normal
  	   :prefix leader
  	   "g" 'magit))
#+end_src
